const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

passport.serializeUser((user, done) => {
  // done is a callback after some work is done
  // this id is not a googleId, but a unique id automatically generated by mongodb
  // we are not using google id, because some users can be sing in by for example facebook
  // and also profile id is needed just to create a new user, then we don't need it
  // id it's shortcut for _id
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  // every time we access mongodb it's always asynchronous and we need to assume
  // it will return a promise
  User.findById(id)
    .then(user => {
      done(null, user);
    });
});

// create new instance of GoogleStrategy
// after the user grants permission sent him to callbackURL
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },

    // done - tells passport that we finished adding new user,
    // and can proceed to authentication flow
    async (accessToken, refreshToken, profile, done) => {
      // find a record when googleid === propfile.id
      // this query returns a promise
      const existingUser = await User.findOne({googleId: profile.id});
        if (existingUser) {
          // first arg its error, second user
          return done(null, existingUser);
        }
        // else refresh token allows to refresh access token that expires automatically
        // after some amount of time
        // save will save it to the db
        // new user creates new model instance
        const user = await new User({ googleId: profile.id }).save();
        done(null, user);
    }
  )
);